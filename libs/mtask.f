\ мультизадачность, удобно использовать для ожидания события без подвисания программы
\ iva 18.02.2013
\ когда задача вызывает Ago! в списке задач сохраняется адрес возврата в эту задачу
\ и управление передается в задачу вызвавшую текущую задачу
\ когда вызывается Ago@, управление прередается в очередную задачу из списка задач
\ индексы mtRid и mtWid играют в догонялки в кольцевом буфере, если mtRid догнал mtWid, значит все отложенные задачи выполнены,
\ если mtWid догнал mtRid - значит буфер мал и отложенные задачи пропадают
\ если список задач пуст выставляется флаг Т, в противном случае сбрасывается. 
\ Это можно использовать для засыпания проца.
\ ==================== ресурсы ==============================================
\ (...r15)  register: (0)  \ 0 в регистре
\ 8 constant taskSize \ размер списка задач, кольцевой буфер (кратен степени двойки)
\ ============================================================================

RAM[ 1 take mtRid \ индекс чтения 
     1 take mtWid \ индекс записи
     taskSize take ListTasks \ список адресов  отложенных задач, кольцевой буфер (кратен степени двойки) 
    ]RAM

code mtIni ( ) \ подготовка к работе
    mov mtRid,(0)   mov mtWid,(0) \ обнулить индексы
    ret c;
code Ago! ( ) \ запомнить адрес возврата
\ используются регистры: R, X, XH
\ портится SREG
\ 17 тактов + ret
    mov r,mtWid                             \ получить индекс списка задач
    ldiW X,ListTasks add xL,r adc xH,(0)    \ получить адрес свободного места
    addi r,2 andi r,taskSize 1- mov mtWid,r \ сдвинуть индекс записи
    pop r st x+,r  pop r st x,r             \ сохранить адрес возврата в списке задач
    ret c;  \ возврат в задачу вызвавшую отложенную
\ ago! val?

code Ago@ ( -- T) \ вызвать отложенную задачу, T=1 если ничего не отложено
\ используются регистры: R, RH, X, XH
\ портится SREG
\ 6 или 23 такта + ret
    \ получить индексы списка задач
    mov r,mtRid  mov rH,mtWid cp r,rH if= set ret then   \ нет отложенных задач    
    clt \ список не пуст
    ldiW X,ListTasks add xL,r adc xH,(0)    \ получить адрес места
    addi r,2 andi r,taskSize 1- mov mtRid,r \ сохранит индекс
    ld rH,x+ ld rL,x pushW r                \ подменить адрес возврата
    ret c;  \ возврат в отложенную задачу
\ Ago@ val?

