\ ***** Specify Device
\ device ATmega8
HEX[
005F  CONSTANT      IOEND       \  96 bytes I/O
0060  CONSTANT      SRAM_START
00400 CONSTANT      RAMSIZE     \  1K byte RAM
0045F CONSTANT      RAMEND      \  byte
00FFF CONSTANT      FLASHEND    \  word (2byte)
00    CONSTANT      XRAMEND     \  Last External RAM Location
001FF CONSTANT      E2END       \  Last EEPROM Location
                                     \   byte groups
                                     \   /\/--\/--\/--\ 
00F80 CONSTANT      SMALLBOOTSTART   \ 0b00111110000000   smallest boot block is 256
00F00 CONSTANT      SECONDBOOTSTART  \ 0b00111100000000   2'nd boot block size is 512
00E00 CONSTANT      THIRDBOOTSTART   \ 0b00111000000000   third boot block size is 1K
00C00 CONSTANT      LARGEBOOTSTART   \ 0b00110000000000   largest boot block is 2K
00020 CONSTANT      PAGESIZE         \  32     \ number of WORDS in a page

\ ***** Lock Bits
\ default #   TYPE    name
    1     0   LOCK:    LB1
    1     1   LOCK:    LB2
    1     2   LOCK:    BLB01
    1     3   LOCK:    BLB02
    1     4   LOCK:    BLB11
    1     5   LOCK:    BLB12

\ ***** Fuse Bits
\ default #   TYPE    name
    1     00  FUSE:   CKSEL0      \ low byte
    0     01  FUSE:   CKSEL1
    0     02  FUSE:   CKSEL2
    0     03  FUSE:   CKSEL3
    0     04  FUSE:   SUT0
    1     05  FUSE:   SUT1
    1     06  FUSE:   BODEN
    1     07  FUSE:   BODLEVEL
    1     08  FUSE:   BOOTRST     \ high byte
    0     09  FUSE:   BOOTSZ0
    0     0A  FUSE:   BOOTSZ1
    1     0B  FUSE:   EESAVE
    1     0C  FUSE:   CKOPT
    0     0D  FUSE:   SPIEN
    1     0E  FUSE:   WDTON
    1     0F  FUSE:   RSTDISBL

\ ******** Interrupts vectors
002 constant    INT0addr     \  External Interrupt0 Vector Address
004 constant    INT1addr     \  External Interrupt1 Vector Address
006 constant    OC2addr      \  Output Compare2 Interrupt Vector Address
008 constant    OVF2addr     \  Overflow2 Interrupt Vector Address
00A constant    ICP1addr     \  Input Capture1 Interrupt Vector Address
00C constant    OC1Aaddr     \  Output Compare1A Interrupt Vector Address
00E constant    OC1Baddr     \  Output Compare1B Interrupt Vector Address
010 constant    OVF1addr     \  Overflow1 Interrupt Vector Address
012 constant    OVF0addr     \  Overflow0 Interrupt Vector Address
014 constant    SPIaddr      \  SPI Interrupt Vector Address
016 constant    URXCaddr     \  USART Receive Complete Interrupt Vector Address
018 constant    UDREaddr     \  USART Data Register Empty Interrupt Vector Address
01A constant    UTXCaddr     \  USART Transmit Complete Interrupt Vector Address
01C constant    ADCCaddr     \  ADC Interrupt Vector Address
01E constant    ERDYaddr     \  EEPROM Interrupt Vector Address
020 constant    ACIaddr      \  Analog Comparator Interrupt Vector Address
022 constant    TWIaddr      \  Irq. vector address for Two-Wire Interface
024 constant    SPMaddr      \  SPM complete Interrupt Vector Address

026  constant    ROM_FREE   \ Стартовый адрес кода


\ ***** I/O Register Definitions
3F PORT:     SREG     
3E PORT:     SPH         
3D PORT:     SPL         
3B PORT:     GIMSK     
3B PORT:     GICR     \  new name for GIMSK
3A PORT:     GIFR     
39 PORT:     TIMSK     
38 PORT:     TIFR     
37 PORT:     SPMCR     
36 PORT:     I2CR     
36 PORT:     TWCR     
35 PORT:     MCUCR    
34 PORT:     MCUSR    \  For compatibility,
34 PORT:     MCUCSR   \  keep both names until further
33 PORT:     TCCR0    
32 PORT:     TCNT0    
31 PORT:     OSCCAL   
30 PORT:     SFIOR    
2F PORT:     TCCR1A     
2E PORT:     TCCR1B     
2D PORT:     TCNT1H     
2C PORT:     TCNT1L     
2B PORT:     OCR1AH     
2A PORT:     OCR1AL     
29 PORT:     OCR1BH     
28 PORT:     OCR1BL     
27 PORT:     ICR1H     
26 PORT:     ICR1L     
25 PORT:     TCCR2     
24 PORT:     TCNT2     
23 PORT:     OCR2     
22 PORT:     ASSR     
21 PORT:     WDTCR    
20 PORT:     UBRRH            \   Note! UCSRC equals UBRRH
1F PORT:     EEARH    
1E PORT:     EEARL    
1D PORT:     EEDR     
1C PORT:     EECR     
18 PORT:     PORTB    
17 PORT:     DDRB     
16 PORT:     PINB     
15 PORT:     PORTC    
14 PORT:     DDRC     
13 PORT:     PINC     
12 PORT:     PORTD    
11 PORT:     DDRD     
10 PORT:     PIND     
0F PORT:     SPDR     
0E PORT:     SPSR     
0D PORT:     SPCR     
0C PORT:     UDR      
0B PORT:     UCSRA    
0A PORT:     UCSRB    
20 PORT:     UCSRC            \   Note! UCSRC equals UBRRH
09 PORT:     UBRRL    
08 PORT:     ACSR     
07 PORT:     ADMUX    
06 PORT:     ADCSR    
06 PORT:     ADCSRA   
05 PORT:     ADCH     
04 PORT:     ADCL     
03 PORT:     I2DR     
02 PORT:     I2AR     
01 PORT:     I2SR     
00 PORT:     I2BR     
03 PORT:     TWDR     
02 PORT:     TWAR     
01 PORT:     TWSR     
00 PORT:     TWBR     
]HEX


\ ***** Bit Definitions
    BitsIn GICR  ( former GIMSK)
    7 #BitIs     INT1
    6 #BitIs     INT0    
    1 #BitIs     IVSEL           \  interrupt vector select
    0 #BitIs     IVCE            \  interrupt vector change enable

    BitsIn GIFR
    7 #BitIs     INTF1   
    6 #BitIs     INTF0   

    BitsIn TIMSK
    0 #BitIs     TOIE0   
    2 #BitIs     TOIE1   
    3 #BitIs     OCIE1B  
    4 #BitIs     OCIE1A  
    5 #BitIs     TICIE1  
    6 #BitIs     TOIE2   
    7 #BitIs     OCIE2   

    BitsIn TIFR
    0 #BitIs     TOV0     
    2 #BitIs     TOV1     
    3 #BitIs     OCF1B    
    4 #BitIs     OCF1A    
    5 #BitIs     ICF1     
    6 #BitIs     TOV2     
    7 #BitIs     OCF2     

    BitsIn SPMCR
    7 #BitIs     SPMIE     
    6 #BitIs     RWWSB     
    4 #BitIs     RWWSRE    
    3 #BitIs     BLBSET    
    2 #BitIs     PGWRT     
    1 #BitIs     PGERS     
    0 #BitIs     SPMEN     

    BitsIn MCUCR
    7 #BitIs     SE       
    6 #BitIs     SM2      
    5 #BitIs     SM1      
    4 #BitIs     SM0      
    3 #BitIs     ISC11    
    2 #BitIs     ISC10    
    1 #BitIs     ISC01    
    0 #BitIs     ISC00    

    BitsIn MCUCSR
    3 #BitIs     WDRF     
    2 #BitIs     BORF     
    1 #BitIs     EXTRF    
    0 #BitIs     PORF     

    BitsIn TCCR0
    2 #BitIs     CS02     
    1 #BitIs     CS01     
    0 #BitIs     CS00     

    BitsIn TCCR1A
    7 #BitIs     COM1A1    
    6 #BitIs     COM1A0
    5 #BitIs     COM1B1    
    4 #BitIs     COM1B0    
    3 #BitIs     FOC1A     
    2 #BitIs     FOC1B     
    1 #BitIs     PWM11         \  OBSOLETE! Use WGM11
    0 #BitIs     PWM10         \  OBSOLETE! Use WGM10
    1 #BitIs     WGM11     
    0 #BitIs     WGM10     
    BitsIn TCCR1B
    7 #BitIs     ICNC1     
    6 #BitIs     ICES1     
    4 #BitIs     CTC11         \  OBSOLETE! Use WGM13
    3 #BitIs     CTC10         \  OBSOLETE! Use WGM12
    4 #BitIs     WGM13     
    3 #BitIs     WGM12         
    3 #BitIs     CTC1              \  Obsolete - Included for backward compatibility
    2 #BitIs     CS12      
    1 #BitIs     CS11      
    0 #BitIs     CS10      

    BitsIn TCCR2
    7 #BitIs     FOC2     
    6 #BitIs     PWM2         \  OBSOLETE! Use WGM20
    6 #BitIs     WGM20        
    5 #BitIs     COM21    
    4 #BitIs     COM20    
    3 #BitIs     CTC2         \  OBSOLETE! Use WGM21
    3 #BitIs     WGM21        
    2 #BitIs     CS22     
    1 #BitIs     CS21     
    0 #BitIs     CS20     

    BitsIn SFIOR
    4 #BitIs     ADHSM    
    3 #BitIs     ACME     
    2 #BitIs     PUD      
    1 #BitIs     PSR2     
    0 #BitIs     PSR10    

    BitsIn WDTCR
    4 #BitIs     WDCE     
    4 #BitIs     WDTOE    
    3 #BitIs     WDE      
    2 #BitIs     WDP2     
    1 #BitIs     WDP1     
    0 #BitIs     WDP0     

    BitsIn EECR
    3 #BitIs     EERIE    
    2 #BitIs     EEMWE    
    1 #BitIs     EEWE     
    0 #BitIs     EERE     

    BitsIn PORTB
    7 #BitIs     PB7     
    6 #BitIs     PB6     
    5 #BitIs     PB5     
    4 #BitIs     PB4     
    3 #BitIs     PB3     
    2 #BitIs     PB2     
    1 #BitIs     PB1     
    0 #BitIs     PB0     

    BitsIn DDRB
    7 #BitIs     DDB7     
    6 #BitIs     DDB6     
    5 #BitIs     DDB5     
    4 #BitIs     DDB4     
    3 #BitIs     DDB3     
    2 #BitIs     DDB2     
    1 #BitIs     DDB1     
    0 #BitIs     DDB0     

    BitsIn PINB
    7 #BitIs     PINB7     
    6 #BitIs     PINB6     
    5 #BitIs     PINB5     
    4 #BitIs     PINB4     
    3 #BitIs     PINB3     
    2 #BitIs     PINB2     
    1 #BitIs     PINB1     
    0 #BitIs     PINB0     

    BitsIn PORTC
    6 #BitIs     PC6     
    5 #BitIs     PC5     
    4 #BitIs     PC4     
    3 #BitIs     PC3     
    2 #BitIs     PC2     
    1 #BitIs     PC1     
    0 #BitIs     PC0     

    BitsIn DDRC
    6 #BitIs     DDC6     
    5 #BitIs     DDC5     
    4 #BitIs     DDC4     
    3 #BitIs     DDC3     
    2 #BitIs     DDC2     
    1 #BitIs     DDC1     
    0 #BitIs     DDC0     

    BitsIn PINC
    6 #BitIs     PINC6     
    5 #BitIs     PINC5     
    4 #BitIs     PINC4     
    3 #BitIs     PINC3     
    2 #BitIs     PINC2     
    1 #BitIs     PINC1     
    0 #BitIs     PINC0     

    BitsIn PORTD
    7 #BitIs     PD7     
    6 #BitIs     PD6     
    5 #BitIs     PD5     
    4 #BitIs     PD4     
    3 #BitIs     PD3     
    2 #BitIs     PD2     
    1 #BitIs     PD1     
    0 #BitIs     PD0     

    BitsIn DDRD
    7 #BitIs     DDD7     
    6 #BitIs     DDD6     
    5 #BitIs     DDD5     
    4 #BitIs     DDD4     
    3 #BitIs     DDD3     
    2 #BitIs     DDD2     
    1 #BitIs     DDD1     
    0 #BitIs     DDD0     

    BitsIn PIND
    7 #BitIs     PIND7     
    6 #BitIs     PIND6     
    5 #BitIs     PIND5     
    4 #BitIs     PIND4     
    3 #BitIs     PIND3     
    2 #BitIs     PIND2     
    1 #BitIs     PIND1     
    0 #BitIs     PIND0     

    BitsIn UCSRA
    7 #BitIs     RXC     
    6 #BitIs     TXC     
    5 #BitIs     UDRE    
    4 #BitIs     FE      
    3 #BitIs     DOR     
    2 #BitIs     UPE     
    2 #BitIs     PE      
    1 #BitIs     U2X     
    0 #BitIs     MPCM    

    BitsIn UCSRB
    7 #BitIs     RXCIE     
    6 #BitIs     TXCIE     
    5 #BitIs     UDRIE     
    4 #BitIs     RXEN      
    3 #BitIs     TXEN      
    2 #BitIs     CHR9              \  old name kept for compatibilty
    2 #BitIs     UCSZ2     
    1 #BitIs     RXB8      
    0 #BitIs     TXB8      

    BitsIn UCSRC
    7 #BitIs     URSEL     
    6 #BitIs     UMSEL     
    5 #BitIs     UPM1      
    4 #BitIs     UPM0      
    3 #BitIs     USBS      
    2 #BitIs     UCSZ1     
    1 #BitIs     UCSZ0     
    0 #BitIs     UCPOL     
            
    BitsIn SPCR
    7 #BitIs     SPIE     
    6 #BitIs     SPE      
    5 #BitIs     DORD     
    4 #BitIs     MSTR     
    3 #BitIs     CPOL     
    2 #BitIs     CPHA     
    1 #BitIs     SPR1     
    0 #BitIs     SPR0     

    BitsIn SPSR
    7 #BitIs     SPIF     
    6 #BitIs     WCOL     
    0 #BitIs     SPI2X    

    BitsIn ACSR
    7 #BitIs     ACD     
    6 #BitIs     ACBG    
    5 #BitIs     ACO     
    4 #BitIs     ACI     
    3 #BitIs     ACIE    
    2 #BitIs     ACIC    
    1 #BitIs     ACIS1   
    0 #BitIs     ACIS0   

    BitsIn ADMUX
    7 #BitIs     REFS1    
    6 #BitIs     REFS0    
    5 #BitIs     ADLAR    
    3 #BitIs     MUX3     
    2 #BitIs     MUX2     
    1 #BitIs     MUX1     
    0 #BitIs     MUX0     

    BitsIn ADCSR
    7 #BitIs     ADEN     
    6 #BitIs     ADSC     
    5 #BitIs     ADFR     
    4 #BitIs     ADIF     
    3 #BitIs     ADIE     
    2 #BitIs     ADPS2    
    1 #BitIs     ADPS1    
    0 #BitIs     ADPS0    

    BitsIn  TWCR
    7 #BitIs     TWINT    
    6 #BitIs     TWEA     
    5 #BitIs     TWSTA    
    4 #BitIs     TWSTO    
    3 #BitIs     TWWC     
    2 #BitIs     TWEN     

    0 #BitIs     TWIE     

    BitsIn  TWAR
    7 #BitIs     TWA6     
    6 #BitIs     TWA5     
    5 #BitIs     TWA4     
    4 #BitIs     TWA3     
    3 #BitIs     TWA2     
    2 #BitIs     TWA1     
    1 #BitIs     TWA0     
    0 #BitIs     TWGCE    

    BitsIn  TWSR
    7 #BitIs     TWS7     
    6 #BitIs     TWS6     
    5 #BitIs     TWS5     
    4 #BitIs     TWS4     
    3 #BitIs     TWS3     
    1 #BitIs     TWPS1    
    0 #BitIs     TWPS0    

    BitsIn ASSR
    3 #BitIs     AS2
    2 #BitIs     TCN2UB   
    1 #BitIs     OCR2UB   
    0 #BitIs     TCR2UB   

\ Набор инструкций микроконтроллера ATmega8.
\ Система обозначения операндов в основном совпадает с фирменной документацией,
\ но для большей информативности и различимости, введены дополнительные.
\ Rr    - регистр общего назначения (РОН), R[0...31]
\ Rd    - регистр общего назначения, R[0...31]
\ Rdr   - частный случай, когда Rd=Rr
\ R'd   - старшие регистры, R[16...31]
\ R"d   - чётные регистры, R[2,4,...30]
\ R*d   - регистровые пары, R[24,26,28,30]
\ b     - бит в РОН или порту, доступный для битовых команд
\ sb    - бит в системном регистре SREG 
\ k     - абсолютный адрес в пространстве ROM, всегда >0
\ -k    - относительный адрес, может быть отрицательным
\ (k)   - абсолютный адрес в пространстве RAM
\ A     - адрес в пространстве ввода-вывода, 0<=A<=31 (или 32<=(k)<=63 в RAM)
\ !K!   - байт маски, при ассемблировании инвертируется
\ K!    - байт, константа

\ ------------------------------------------------------------------------------
\ первое opcode (последнее при поиске) в цепи - заглушка
\ ------------------------------------------------------------------------------
cmd: ?unknown?  ?.   ;  Opcode: ................    \ заглушка        
\ порядок следования команд в этом списке в основном совпадает с документацией,
\ но похожие команды должны следовать от большего числа параметров к меньшим.
\ арифметические и логические операции
cmd: ADD    Rd, Rr   ;  Opcode: 000011rdddddrrrr    \ Суммирование без переноса | Rd=Rd + Rr 
cmd: ADC    Rd, Rr   ;  Opcode: 000111rdddddrrrr    \ Суммирование с переносом | Rd=Rd + Rr + C
cmd: ADIW   R*d, K!  ;  Opcode: 10010110KKddKKKK    \ Сложить константу и слово | Rdh:Rdl=Rdh:Rdl + K6 
cmd: SUB    Rd, Rr   ;  Opcode: 000110rdddddrrrr    \ Вычитание без переноса | Rd=Rd - Rr
cmd: SUBI   R'd, K!  ;  Opcode: 0101KKKKddddKKKK    \ Вычитание константы | Rd=Rd - K8
cmd: SBC    Rd, Rr   ;  Opcode: 000010rdddddrrrr    \ Вычитание с переносом | Rd=Rd - Rr - C
cmd: SBCI   R'd, K!  ;  Opcode: 0100KKKKddddKKKK    \ Вычитание константы с переносом | Rd=Rd - K8 - C
cmd: SBIW   R*d, K!  ;  Opcode: 10010111KKddKKKK    \ Вычесть константу из слова | Rdh:Rdl=Rdh:Rdl - K6
cmd: AND    Rd, Rr   ;  Opcode: 001000rdddddrrrr    \ Логическое И | Rd=Rd · Rr
cmd: CBR    R'd, !K! ;  Opcode: 0111KKKKddddKKKK    \ Сбросить бит (биты) в регистре | Rd=Rd · ($FF - K8)
cmd: ANDI   R'd, K!  ;  Opcode: 0111KKKKddddKKKK    \ Логическое И с константой | Rd=Rd · K8
cmd: OR     Rd, Rr   ;  Opcode: 001010rdddddrrrr    \ Логическое ИЛИ | Rd=Rd V Rr
cmd: SBR    R'd, K!  ;  Opcode: 0110KKKKddddKKKK    \ Установить бит (биты) в регистре | Rd=Rd V K8
cmd: ORI    R'd, K!  ;  Opcode: 0110KKKKddddKKKK    \ Логическое ИЛИ с константой | Rd=Rd V K8
cmd: EOR    Rd, Rr   ;  Opcode: 001001rdddddrrrr    \ Логическое исключающее ИЛИ | Rd=Rd EOR Rr
cmd: COM    Rd       ;  Opcode: 1001010ddddd0000    \ Побитная Инверсия | Rd=$FF - Rd
cmd: NEG    Rd       ;  Opcode: 1001010ddddd0001    \ Изменение знака (Доп. код) | Rd=$00 - Rd
cmd: INC    Rd       ;  Opcode: 1001010ddddd0011    \ Инкрементировать значение регистра | Rd=Rd + 1
cmd: DEC    Rd       ;  Opcode: 1001010ddddd1010    \ Декрементировать значение регистра | Rd=Rd -1
cmd: TST    Rdr      ;  Opcode: 001000rdddddrrrr    \ Проверка на ноль либо отрицательность | Rd=Rd · Rd
cmd: CLR    Rdr      ;  Opcode: 001001rdddddrrrr    \ Очистить регистр | Rd=0
cmd: SER    R'd      ;  Opcode: 11101111dddd1111    \ Установить регистр | Rd=$FF
cmd: MUL    Rd, Rr   ;  Opcode: 100111rdddddrrrr    \ Умножение чисел без знака | R1:R0=Rd * Rr
cmd: MULS   R'd, R'r ;  Opcode: 00000010ddddrrrr    \ Умножение чисел со знаком | R1:R0=Rd * Rr
cmd: MULSU  R'd, R'r ;  Opcode: 000000110ddd0rrr    \ Умножение числа со знаком с числом без знака | R1:R0=Rd * Rr
cmd: FMUL   R'd, R'r ;  Opcode: 000000110ddd1rrr    \ Умножение дробных чисел без знака | R1:R0=(Rd * Rr) << 1
cmd: FMULS  R'd, R'r ;  Opcode: 000000111ddd0rrr    \ Умножение дробных чисел со знаком | R1:R0=(Rd *Rr) << 1
cmd: FMULSU R'd, R'r ;  Opcode: 000000111ddd1rrr    \ Умножение дробного числа со знаком с числом без знака | R1:R0=(Rd * Rr) << 1

\ передача управления
cmd: RJMP   -k       ;  Opcode: 1100kkkkkkkkkkkk    \ Относительный переход | PC=PC + k +1
cmd: IJMP            ;  Opcode: 1001010000001001    \ Косвенный переход на (Z) | PC=Z
cmd: RCALL  -k       ;  Opcode: 1101kkkkkkkkkkkk    \ Относительный вызов подпрограммы | STACK=PC+1, PC=PC + k + 1
cmd: ICALL           ;  Opcode: 1001010100001001    \ Косвенный вызов (Z) | STACK=PC+1, PC=Z 
cmd: RET             ;  Opcode: 1001010100001000    \ Возврат из подпрограммы | PC=STACK
cmd: RETI            ;  Opcode: 1001010100011000    \ Возврат из прерывания | PC=STACK
cmd: CPSE   Rd, Rr   ;  Opcode: 000100rdddddrrrr    \ Сравнить, пропустить если равны | if (Rd==Rr) PC=PC 2 or 3
cmd: CP     Rd, Rr   ;  Opcode: 000101rdddddrrrr    \ Сравнить | Rd -Rr
cmd: CPC    Rd, Rr   ;  Opcode: 000001rdddddrrrr    \ Сравнить с переносом | Rd - Rr - C
cmd: CPI    R'd, K!  ;  Opcode: 0011KKKKddddKKKK    \ Сравнить с константой | Rd - K
cmd: SBRC   Rr, b    ;  Opcode: 1111110rrrrr0bbb    \ Пропустить если бит в регистре очищен |if(Rr(b)==0) PC=PC + 2 or 3
cmd: SBRS   Rr, b    ;  Opcode: 1111111rrrrr0bbb    \ Пропустить если бит в регистре установлен | if(Rr(b)==1) PC=PC + 2 or 3   
cmd: SBIC   A,  b    ;  Opcode: 10011001AAAAAbbb    \ Пропустить если бит в порту очищен | if(I/O(P,b)==0) PC=PC + 2 or 3
cmd: SBIS   A,  b    ;  Opcode: 10011011AAAAAbbb    \ Пропустить если бит в порту установлен | if(I/O(P,b)==1) PC=PC + 2 or 3
cmd: BRBS   sb, -k   ;  Opcode: 111100kkkkkkksss    \ Перейти если флаг в SREG установлен | if(SREG(s)==1) PC=PC + k + 1
cmd: BRBC   sb, -k   ;  Opcode: 111101kkkkkkksss    \ Перейти если флаг в SREG очищен | if(SREG(s)==0) PC=PC + k + 1
cmd: BREQ   -k       ;  Opcode: 111100kkkkkkk001    \ Перейти если равно | if(Z==1) PC=PC + k + 1
cmd: BRNE   -k       ;  Opcode: 111101kkkkkkk001    \ Перейти если не равно | if(Z==0) PC=PC + k + 1
cmd: BRLO   -k       ;  Opcode: 111100kkkkkkk000    \ Перейти если меньше | if(C==1) PC=PC + k + 1
cmd: BRCS   -k       ;  Opcode: 111100kkkkkkk000    \ Перейти если перенос установлен | if(C==1) PC=PC + k + 1
cmd: BRSH   -k       ;  Opcode: 111101kkkkkkk000    \ Перейти если равно или больше | if(C==0) PC=PC + k + 1
cmd: BRCC   -k       ;  Opcode: 111101kkkkkkk000    \ Перейти если перенос очищен | if(C==0) PC=PC + k + 1
cmd: BRMI   -k       ;  Opcode: 111100kkkkkkk010    \ Перейти если минус | if(N==1) PC=PC + k + 1
cmd: BRPL   -k       ;  Opcode: 111101kkkkkkk010    \ Перейти если плюс | if(N==0) PC=PC + k + 1
cmd: BRGE   -k       ;  Opcode: 111101kkkkkkk100    \ Перейти если больше или равно (со знаком) | if(S==0) PC=PC + k + 1
cmd: BRLT   -k       ;  Opcode: 111100kkkkkkk100    \ Перейти если меньше нуля (со знаком) | if(S==1) PC=PC + k + 1
cmd: BRHS   -k       ;  Opcode: 111100kkkkkkk101    \ Перейти если флаг внутреннего переноса установлен | if(H==1) PC=PC + k + 1
cmd: BRHC   -k       ;  Opcode: 111101kkkkkkk101    \ Перейти если флаг внутреннего переноса очищен | if(H==0) PC=PC + k + 1
cmd: BRTS   -k       ;  Opcode: 111100kkkkkkk110    \ Перейти если флаг T установлен | if(T==1) PC=PC + k + 1
cmd: BRTC   -k       ;  Opcode: 111101kkkkkkk110    \ Перейти если флаг T очищен | if(T==0) PC=PC + k + 1
cmd: BRVS   -k       ;  Opcode: 111100kkkkkkk011    \ Перейти если флаг переполнения установлен | if(V==1) PC=PC + k + 1
cmd: BRVC   -k       ;  Opcode: 111101kkkkkkk011    \ Перейти если флаг переполнения очищен | if(V==0) PC=PC + k + 1
cmd: BRIE   -k       ;  Opcode: 111100kkkkkkk111    \ Перейти если прерывания разрешены | if(I==1) PC=PC + k + 1
cmd: BRID   -k       ;  Opcode: 111101kkkkkkk111    \ Перейти если прерывания запрещены | if(I==0) PC=PC + k + 1

\ перемещение данных
cmd: MOV    Rd, Rr   ;  Opcode: 001011rdddddrrrr    \ Скопировать регистр | Rd=Rr
cmd: MOVW   R"d, R"r ;  Opcode: 00000001ddddrrrr    \ Скопировать пару регистров | Rd+1:Rd=Rr+1:Rr, r,d чётные
cmd: LDI    R'd, K!  ;  Opcode: 1110KKKKddddKKKK    \ Загрузить константу | Rd=K
cmd: LD     Rd, X+   ;  Opcode: 1001000ddddd1101    \ Косвенная загрузка с пост-инкрементом | Rd=(X), X=X+1
cmd: LD     Rd, -X   ;  Opcode: 1001000ddddd1110    \ Косвенная загрузка с пре-декрементом | X=X-1, Rd=(X)
cmd: LD     Rd, X    ;  Opcode: 1001000ddddd1100    \ Косвенная загрузка | Rd=(X)
cmd: LDD    Rd, Y+q  ;  Opcode: 10q0qq0ddddd1qqq    \ Косвенная загрузка со смещением | Rd=(Y+q) 
cmd: LD     Rd, Y+   ;  Opcode: 1001000ddddd1001    \ Косвенная загрузка с пост-инкрементом | Rd=(Y), Y=Y+1
cmd: LD     Rd, -Y   ;  Opcode: 1001000ddddd1010    \ Косвенная загрузка с пре-декрементом | Y=Y-1, Rd=(Y)
cmd: LD     Rd, Y    ;  Opcode: 1000000ddddd1000    \ Косвенная загрузка | Rd=(Y)
cmd: LDD    Rd, Z+q  ;  Opcode: 10q0qq0ddddd0qqq    \ Косвенная загрузка со смещением | Rd=(Z+q) 
cmd: LD     Rd, Z+   ;  Opcode: 1001000ddddd0001    \ Косвенная загрузка с пост-инкрементом | Rd=(Z), Z=Z+1
cmd: LD     Rd, -Z   ;  Opcode: 1001000ddddd0010    \ Косвенная загрузка с пре-декрементом | Z=Z-1, Rd=(Z)
cmd: LD     Rd, Z    ;  Opcode: 1000000ddddd0000    \ Косвенная загрузка | Rd=(Z)
cmd: LDS    Rd, (k)  ;  Opcode: 1001000ddddd0000 ext: kkkkkkkkkkkkkkkk \ Прямая загрузка | Rd=(k)
cmd: ST     X+, Rr   ;  Opcode: 1001001rrrrr1101    \ Косвенное сохранение с пост-инкрементом | (X)=Rr, X=X+1
cmd: ST     -X, Rr   ;  Opcode: 1001001rrrrr1110    \ Косвенное сохранение с пре-декрементом | X=X-1, (X)=Rr
cmd: ST     X,  Rr   ;  Opcode: 1001001rrrrr1100    \ Косвенное сохранение | (X)=Rr
cmd: STD    Y+q, Rr  ;  Opcode: 10q0qq1rrrrr1qqq    \ Косвенное сохранение со смещением | (Y+q)=Rr
cmd: ST     Y+, Rr   ;  Opcode: 1001001rrrrr1001    \ Косвенное сохранение с пост-инкрементом | (Y)=Rr, Y=Y+1 
cmd: ST     -Y, Rr   ;  Opcode: 1001001rrrrr1010    \ Косвенное сохранение с пре-декрементом | Y=Y-1, (Y)=Rr 
cmd: ST     Y,  Rr   ;  Opcode: 1000001rrrrr1000    \ Косвенное сохранение | (Y)=Rr
cmd: STD    Z+q, Rr  ;  Opcode: 10q0qq1rrrrr0qqq    \ Косвенное сохранение со смещением | (Z+q)=Rr
cmd: ST     Z+, Rr   ;  Opcode: 1001001rrrrr0001    \ Косвенное сохранение с пост-инкрементом | (Z)=Rr, Z=Z+1 
cmd: ST     -Z, Rr   ;  Opcode: 1001001rrrrr0010    \ Косвенное сохранение с пре-декрементом | Z=Z-1, (Z)=Rr
cmd: ST     Z,  Rr   ;  Opcode: 1000001rrrrr0000    \ Косвенное сохранение | (Z)=Rr
cmd: STS    (k), Rr  ;  Opcode: 1001001rrrrr0000 ext: kkkkkkkkkkkkkkkk \ Прямое сохранение | (k)=Rr
cmd: LPM    Rd, Z+   ;  Opcode: 1001000ddddd0101    \ Загрузка из программной памяти с пост-инкрементом | Rd=(Z), Z=Z+1
cmd: LPM    Rd, Z    ;  Opcode: 1001000ddddd0100    \ Загрузка из программной памяти | Rd=(Z)
cmd: LPM             ;  Opcode: 1001010111001000    \ Загрузка из программной памяти | R0=(Z)
cmd: SPM             ;  Opcode: 1001010111101000    \ Сохранение в программной памяти | (Z)=R1:R0
cmd: IN     Rd, A    ;  Opcode: 10110AAdddddAAAA    \ Чтение порта | Rd=P
cmd: OUT    A,  Rr   ;  Opcode: 10111AArrrrrAAAA    \ Запись в порт | P=Rr
cmd: PUSH   Rr       ;  Opcode: 1001001rrrrr1111    \ Занесение регистра в стек | STACK=Rr
cmd: POP    Rd       ;  Opcode: 1001000ddddd1111    \ Извлечение регистра из стека | Rd=STACK

\ битовые операции
cmd: SBI    A,  b    ;  Opcode: 10011010AAAAAbbb    \ Установить бит в порту | I/O(P,b)=1
cmd: CBI    A,  b    ;  Opcode: 10011000AAAAAbbb    \ Очистить бит в порту | I/O(P,b)=0
cmd: LSL    Rdr      ;  Opcode: 000011rdddddrrrr    \ Логический сдвиг влево | Rd(n+1)=Rd(n), Rd(0)=0, C=Rd(7)
cmd: LSR    Rd       ;  Opcode: 1001010ddddd0110    \ Логический сдвиг вправо | Rd(n)=Rd(n+1), Rd(7)=0, C=Rd(0)
cmd: ROL    Rdr      ;  Opcode: 000111rdddddrrrr    \ Циклический сдвиг влево через C | Rd(0)=C, Rd(n+1)=Rd(n), C=Rd(7)
cmd: ROR    Rd       ;  Opcode: 1001010ddddd0111    \ Циклический сдвиг вправо через C | Rd(7)=C, Rd(n)=Rd(n+1), C=Rd(0)
cmd: ASR    Rd       ;  Opcode: 1001010ddddd0101    \ Арифметический сдвиг вправо | Rd(n)=Rd(n+1), n=0,...,6
cmd: SWAP   Rd       ;  Opcode: 1001010ddddd0010    \ Перестановка тетрад | Rd(3..0)=Rd(7..4), Rd(7..4)=Rd(3..0)
cmd: BSET   sb       ;  Opcode: 100101000sss1000    \ Установка флага | SREG(s)=1
cmd: BCLR   sb       ;  Opcode: 100101001sss1000    \ Очистка флага | SREG(s)=0
cmd: BST    Rd, b    ;  Opcode: 1111101ddddd0bbb    \ Сохранить бит из регистра в T | T=Rr(b)
cmd: BLD    Rd, b    ;  Opcode: 1111100ddddd0bbb    \ Загрузить бит из T в регистр | Rd(b)=T
cmd: SEC             ;  Opcode: 1001010000001000    \ Установить флаг переноса | C=1
cmd: CLC             ;  Opcode: 1001010010001000    \ Очистить флаг переноса | C=0
cmd: SEN             ;  Opcode: 1001010000101000    \ Очистить флаг отрицательного числа | N=1
cmd: CLN             ;  Opcode: 1001010010101000    \ Очистить флаг отрицательного числа | N=0
cmd: SEZ             ;  Opcode: 1001010000011000    \ Установить флаг нуля | Z=1
cmd: CLZ             ;  Opcode: 1001010010011000    \ Очистить флаг нуля | Z=0
cmd: SEI             ;  Opcode: 1001010001111000    \ Установить флаг прерываний | I=1
cmd: CLI             ;  Opcode: 1001010011111000    \ Очистить флаг прерываний | I=0
cmd: SES             ;  Opcode: 1001010001001000    \ Установить флаг числа со знаком | S=1
cmd: CLS             ;  Opcode: 1001010011001000    \ Очистить флаг числа со знаком | S=0
cmd: SEV             ;  Opcode: 1001010000111000    \ Установить флаг переполнения | V=1
cmd: CLV             ;  Opcode: 1001010010111000    \ Очистить флаг переполнения | V=0
cmd: SET             ;  Opcode: 1001010001101000    \ Установить флаг T | T=1
cmd: CLT             ;  Opcode: 1001010011101000    \ Очистить флаг T | T=0 
cmd: SEH             ;  Opcode: 1001010001011000    \ Установить флаг внутреннего переноса | H=1
cmd: CLH             ;  Opcode: 1001010011011000    \ Очистить флаг внутреннего переноса | H=0

\ системные
cmd: NOP             ;  Opcode: 0000000000000000    \ Нет операции  
cmd: SLEEP           ;  Opcode: 1001010110001000    \ Спать (уменьшить энергопотребление)  
cmd: WDR             ;  Opcode: 1001010110101000    \ Сброс сторожевого таймера  




 \ **** End of File ***

