\ ***** Specify Device
\ device ATmega88

\ *****************************************************************************
\  Data Memory Declarations
\ *****************************************************************************
DECIMAL
HEX[
    0FF             CONSTANT    IOEND       \  256 bytes I/O
    100             CONSTANT    SRAM_START
    00400           CONSTANT    RAMSIZE     \  1024 byte RAM
    IOEND RAMSIZE + CONSTANT    RAMEND      \  Highest internal data memory (SRAM) address
    0               CONSTANT    XRAMEND     \  Last External RAM Location
    1FF             CONSTANT    EEPROMEND   \  Highest EEPROM address. (256 Bytes)
    1FF             CONSTANT    E2END       \  Last EEPROM Location
    9               CONSTANT    EEADRBITS   \  no. of bits in EEPROM address register
\ *****************************************************************************
\  Program Memory Declarations
\ *****************************************************************************
\ Minimum Wait Delay before Writing the Next Flash or EEPROM Location (ms)
5 CONSTANT TwdFlash
4 CONSTANT TwdEEPROM
9 CONSTANT TwdErase
5 CONSTANT TwdFuse

    00FFF CONSTANT    FLASHEND      \   Highest program memory (flash) address
]HEX                                 \  (When addressed as 16 bit words)

\ **** Page Size ****
32 CONSTANT        PAGESIZE      \ number of WORDS in a Flash page
\ 4  CONSTANT        EEPAGESIZE    \ number of BYTES in an EEPROM page
0  CONSTANT        EEPAGESIZE    \ не пишет постранично!???
\ ***** Lock Bits
\ default #   TYPE    name
    1     0   LOCK:    LB1
    1     1   LOCK:    LB2
    1     2   LOCK:    BLB01
    1     3   LOCK:    BLB02
    1     4   LOCK:    BLB11
    1     5   LOCK:    BLB12

\ ***** Fuse Bits
\ default #   TYPE    name
   \ low byte
0  0 FUSE:    CKSEL0      
1  1 FUSE:    CKSEL1
0  2 FUSE:    CKSEL2
0  3 FUSE:    CKSEL3
0  4 FUSE:    SUT0
1  5 FUSE:    SUT1
1  6 FUSE:    CKOUT
0  7 FUSE:    CKDIV8
   \ high byte
1  8 FUSE:    BODLEVEL0
1  9 FUSE:    BODLEVEL1
1 10 FUSE:    BODLEVEL2
1 11 FUSE:    EESAVE
1 12 FUSE:    WDTON
0 13 FUSE:    SPIEN
1 14 FUSE:    DWEN
1 15 FUSE:    RSTDISBL
  \ Extended Fuse Byte
1 16 FUSE:    BOOTRST
0 17 FUSE:    BOOTSZ0
0 18 FUSE:    BOOTSZ1
\ **** Interrupt Vectors ****                
HEX[
    0002 CONSTANT        INT0addr              \ External Interrupt0
    0004 CONSTANT        INT1addr              \ External Interrupt1
    0006 CONSTANT        PCINT0addr            \ Pin Change Interrupt0
    0008 CONSTANT        PCINT1addr            \ Pin Change Interrupt1
    000A CONSTANT        PCINT2addr            \ Pin Change Interrupt2
    000C CONSTANT        WDTaddr               \ Watchdog Timeout
    000E CONSTANT        OC2Aaddr              \ Timer/Counter2 Compare Match Interrupt
    0010 CONSTANT        OC2Baddr              \ Timer/Counter2 Compare Match Interrupt
    0012 CONSTANT        OVF2addr              \ Overflow2 Interrupt
    0014 CONSTANT        ICP1addr              \ Input Capture1 Interrupt
    0016 CONSTANT        OC1Aaddr              \ Output Compare1A Interrupt
    0018 CONSTANT        OC1Baddr              \ Output Compare1B Interrupt
    001A CONSTANT        OVF1addr              \ Overflow1 Interrupt
    001C CONSTANT        OC0Aaddr              \ Timer/Counter0 Compare Match Interrupt
    001E CONSTANT        OC0Baddr              \ Timer/Counter0 Compare Match Interrupt
    0020 CONSTANT        OVF0addr              \ Overflow0 Interrupt
    0022 CONSTANT        SPIaddr               \ SPI Interrupt
    0024 CONSTANT        URXCaddr              \ USART Receive Complete Interrupt
    0026 CONSTANT        UDREaddr              \ USART Data Register Empty Interrupt
    0028 CONSTANT        UTXCaddr              \ USART Transmit Complete Interrupt
    002A CONSTANT        ADCCaddr              \ ADC Conversion Complete Handle
    002C CONSTANT        ERDYaddr              \ EEPROM write complete
    002E CONSTANT        ACIaddr               \ Analog Comparator Interrupt
    0030 CONSTANT        TWIaddr               \ TWI Interrupt Vector Address
    0032 CONSTANT        SPMRaddr              \ Store Program Memory Ready Interrupt
            
    0034 CONSTANT        ROM_FREE              \ Стартовый адрес кода


\ *****************************************************************************
\  I/O Register Definitions
\ *****************************************************************************

    0C6 PORT:        UDR0                          \  - USART0 -
    0C5 PORT:        UBRR0H         
    0C4 PORT:        UBRR0L         
    0C2 PORT:        UCSR0C         
    0C1 PORT:        UCSR0B         
    0C0 PORT:        UCSR0A         

    0BD PORT:        TWAMR                          \  - TWI -
    0BC PORT:        TWCR         
    0BB PORT:        TWDR         
    0BA PORT:        TWAR                 
    0B9 PORT:        TWSR         
    0B8 PORT:        TWBR         
            
    0B6 PORT:        ASSR                          \  - ASYNC TIM(2) -
    0B4 PORT:        OCR2B                          \  - TIM2 -
    0B3 PORT:        OCR2A         
    0B2 PORT:        TCNT2         
    0B1 PORT:        TCCR2B
    0B0 PORT:        TCCR2A         

    08B PORT:        OCR1BH                          \  - TIM1 -
    08A PORT:        OCR1BL         
    089 PORT:        OCR1AH         
    088 PORT:        OCR1AL         
    087 PORT:        ICR1H         
    086 PORT:        ICR1L         
    085 PORT:        TCNT1H         
    084 PORT:        TCNT1L         
    082 PORT:        TCCR1C         
    081 PORT:        TCCR1B         
    080 PORT:        TCCR1A         

    07F PORT:        DIDR1                          \  - DIDR -
    07E PORT:        DIDR0         

    07C PORT:        ADMUX                          \  - ADC -
    07B PORT:        ADCSRB         
    07A PORT:        ADCSRA         
    079 PORT:        ADCH         
    078 PORT:        ADCL         
            
    070 PORT:        TIMSK2                          \  - TIMER IRQ -
    06F PORT:        TIMSK1         
    06E PORT:        TIMSK0         

    06D PORT:        PCMSK2                          \  - PCINT -
    06C PORT:        PCMSK1         
    06B PORT:        PCMSK0         
            
    069 PORT:        EICRA                          \  - EXT INT SENSE -
    068 PORT:        PCICR                          \  - PCINT -
                                    
    066 PORT:        OSCCAL                          \  Oscillator Calibration Register.
    064 PORT:        PRR         

    061 PORT:        CLKPR         
    060 PORT:        WDTCSR                          \  - WDT -
            
    03F PORT:        SREG                          \  - CPU -
    03E PORT:        SPH                 
    03D PORT:        SPL         
            
    037 PORT:        SPMCSR                          \  - SPM -

    035 PORT:        MCUCR         
    034 PORT:        MCUSR                 
    033 PORT:        SMCR         
            
    031 PORT:        MONDR                          \  - MONCOM -
    030 PORT:        ACSR                          \  - AC -
            
    02E PORT:        SPDR                          \  - SPI -
    02D PORT:        SPSR         
    02C PORT:        SPCR         

    02B PORT:        GPIOR2         
    02A PORT:        GPIOR1         
                    
    028 PORT:        OCR0B                          \  - TIM0 -
    027 PORT:        OCR0A                 
    026 PORT:        TCNT0         
    025 PORT:        TCCR0B                 
    024 PORT:        TCCR0A         

    023 PORT:        GTCCR         

    022 PORT:        EEARH                         \  - EEPROM -
    021 PORT:        EEARL                        
    020 PORT:        EEDR         
    01F PORT:        EECR         

    01E PORT:        GPIOR0         

    01D PORT:        EIMSK                          \  - EXT/PC INT -
    01C PORT:        EIFR                 
    01B PORT:        PCIFR         
                    
    017 PORT:        TIFR2                          \  - TIMERS -
    016 PORT:        TIFR1         




    015 PORT:        TIFR0         
            
    00B PORT:        PORTD                          \  - PORTD -
    00A PORT:        DDRD         
    009 PORT:        PIND                 
    008 PORT:        PORTC                          \  - PORTC -
    007 PORT:        DDRC         
    006 PORT:        PINC         
    005 PORT:        PORTB                          \  - PORTB -
    004 PORT:        DDRB         
    003 PORT:        PINB         
]HEX
        

     
 \ *****************************************************************************
 \  Bit Definitions
 \ *****************************************************************************

    BitsIn UCSR0C
        7 #BitIs UMSEL1      
        6 #BitIs UMSEL0      
        5 #BitIs UPM01       
        4 #BitIs UPM00       
        3 #BitIs USBS0       
        2 #BitIs UCSZ01      
        2 #BitIs UDORD0                       \  MSPI mode
        1 #BitIs UCSZ00      
        1 #BitIs UCPHA0                       \  MSPI mode
        0 #BitIs UCPOL0      

    BitsIn UCSR0B
        7 #BitIs RXCIE0                       \  
        6 #BitIs TXCIE0      
        5 #BitIs UDRIE0      
        4 #BitIs RXEN0       
        3 #BitIs TXEN0       
        2 #BitIs UCSZ02      
        1 #BitIs RXB80       
        0 #BitIs TXB80       
        
    BitsIn UCSR0A
        7 #BitIs RXC0                         \  
        6 #BitIs TXC0
        5 #BitIs UDRE0       
        4 #BitIs FE0         
        3 #BitIs DOR0        
        2 #BitIs PE0         
        1 #BitIs U2X0        
        0 #BitIs MPCM0       
        
    BitsIn TWAMR
        7 #BitIs TWAM6                             \  
        6 #BitIs TWAM5       
        5 #BitIs TWAM4       
        4 #BitIs TWAM3       
        3 #BitIs TWAM2       
        2 #BitIs TWAM1            
        1 #BitIs TWAM0            
        
    BitsIn TWCR
        7 #BitIs TWINT                        \  
        6 #BitIs TWEA        
        5 #BitIs TWSTA       
        4 #BitIs TWSTO       
        3 #BitIs TWWC        
        2 #BitIs TWEN        
        0 #BitIs TWIE        
        
    BitsIn TWAR
        7 #BitIs TWA6                         \  
        6 #BitIs TWA5        
        5 #BitIs TWA4        
        4 #BitIs TWA3        
        3 #BitIs TWA2        
        2 #BitIs TWA1        
        1 #BitIs TWA0        
        0 #BitIs TWGCE       
        
    BitsIn TWSR
        7 #BitIs TWS7                         \  
        6 #BitIs TWS6        
        5 #BitIs TWS5        
        4 #BitIs TWS4        
        3 #BitIs TWS3        
        1 #BitIs TWPS1       
        0 #BitIs TWPS0       
        
    BitsIn ASSR
        6 #BitIs EXCLK                        \  
        5 #BitIs AS2         
        4 #BitIs TCN2UB      
        3 #BitIs OCR2AUB     
        2 #BitIs OCR2BUB     
        1 #BitIs TCR2AUB     
        0 #BitIs TCR2BUB     
        
    BitsIn TCCR2B
        7 #BitIs FOC2A                        \  
        6 #BitIs FOC2B       
        3 #BitIs WGM22               
        2 #BitIs CS22        
        1 #BitIs CS21        
        0 #BitIs CS20        
        
    BitsIn TCCR2A
        7 #BitIs COM2A1                       \  
        6 #BitIs COM2A0                      
        5 #BitIs COM2B1      
        4 #BitIs COM2B0      
        1 #BitIs WGM21       
        0 #BitIs WGM20       
        
    BitsIn TCCR1C
        7 #BitIs FOC1A                        \  
        6 #BitIs FOC1B       
        
    BitsIn TCCR1B
        7 #BitIs ICNC1                        \  
        6 #BitIs ICES1       
        4 #BitIs WGM13       
        3 #BitIs WGM12       
        2 #BitIs CS12        
        1 #BitIs CS11        
        0 #BitIs CS10        

    BitsIn TCCR1A
        7 #BitIs COM1A1                       \  
        6 #BitIs COM1A0      
        5 #BitIs COM1B1      
        4 #BitIs COM1B0      
        1 #BitIs WGM11       
        0 #BitIs WGM10               
        
    BitsIn DIDR1
        1 #BitIs AIN1D                        \  
        0 #BitIs AIN0D       
        
    BitsIn DIDR0
        5 #BitIs ADC5D                        \  
        4 #BitIs ADC4D               
        3 #BitIs ADC3D        
        2 #BitIs ADC2D       
        1 #BitIs ADC1D       
        0 #BitIs ADC0D       
        
    BitsIn ADMUX
        7 #BitIs REFS1                        \  
        6 #BitIs REFS0       
        5 #BitIs ADLAR               
        3 #BitIs MUX3        
        2 #BitIs MUX2        
        1 #BitIs MUX1        
        0 #BitIs MUX0                
        
    BitsIn ADCSRB
        6 #BitIs ACME                         \  
        2 #BitIs ADTS2       
        1 #BitIs ADTS1       
        0 #BitIs ADTS0       
        
    BitsIn ADCSRA
        7 #BitIs ADEN                         \  
        6 #BitIs ADSC        
        5 #BitIs ADATE       
        4 #BitIs ADIF        
        3 #BitIs ADIE        
        2 #BitIs ADPS2       
        1 #BitIs ADPS1       
        0 #BitIs ADPS0       

    BitsIn TIMSK2
        2 #BitIs OCIE2B                       \  
        1 #BitIs OCIE2A      
        0 #BitIs TOIE2       
        
    BitsIn TIMSK1
        5 #BitIs ICIE1                        \  
        2 #BitIs OCIE1B        
        1 #BitIs OCIE1A      
        0 #BitIs TOIE1       
        
    BitsIn TIMSK0
        2 #BitIs OCIE0B                       \  
        1 #BitIs OCIE0A      
        0 #BitIs TOIE0       
        
    BitsIn PCMSK2
        7 #BitIs PCINT23                      \  
        6 #BitIs PCINT22     
        5 #BitIs PCINT21     
        4 #BitIs PCINT20     
        3 #BitIs PCINT19     
        2 #BitIs PCINT18     
        1 #BitIs PCINT17     
        0 #BitIs PCINT16     
        
    BitsIn PCMSK1
        6 #BitIs PCINT14           \  
        5 #BitIs PCINT13     
        4 #BitIs PCINT12     
        3 #BitIs PCINT11     
        2 #BitIs PCINT10     
        1 #BitIs PCINT9      
        0 #BitIs PCINT8      
        
    BitsIn PCMSK0
        7 #BitIs PCINT7                       \  
        6 #BitIs PCINT6      
        5 #BitIs PCINT5      
        4 #BitIs PCINT4      
        3 #BitIs PCINT3      
        2 #BitIs PCINT2      
        1 #BitIs PCINT1      
        0 #BitIs PCINT0      
        
    BitsIn EICRA
        3 #BitIs ISC11                        \  
        2 #BitIs ISC10       
        1 #BitIs ISC01       
        0 #BitIs ISC00       
        
    BitsIn PCICR
        2 #BitIs PCIE2                        \  
        1 #BitIs PCIE1       
        0 #BitIs PCIE0       
        
    BitsIn PRR
        7 #BitIs PRTW1                             \  
        6 #BitIs PRTIM2      
        5 #BitIs PRTIM0              
        3 #BitIs PRTIM1      
        2 #BitIs PRSPI            
        1 #BitIs PRUSART0    
        0 #BitIs PRADC            
        
    BitsIn CLKPR
        7 #BitIs CLKPCE                       \   
        3 #BitIs CLKPS3      
        2 #BitIs CLKPS2      
        1 #BitIs CLKPS1      
        0 #BitIs CLKPS0      
        
    BitsIn WDTCSR
        7 #BitIs WDIF                             \  
        6 #BitIs WDIE            
        5 #BitIs WDP3                    
        4 #BitIs WDCE            
        3 #BitIs WDE            
        2 #BitIs WDP2            
        1 #BitIs WDP1            
        0 #BitIs WDP0            
        
    BitsIn SPH
        1 #BitIs SP9                             \  
        0 #BitIs SP8         
        
    BitsIn SPL
        7 #BitIs SP7                             \  
        6 #BitIs SP6         
        5 #BitIs SP5         
        4 #BitIs SP4         
        3 #BitIs SP3         
        2 #BitIs SP2         
        1 #BitIs SP1         
        0 #BitIs SP0         
        
    BitsIn SPMCSR
        7 #BitIs SPMIE                             \  
        3 #BitIs BLBSET              
        2 #BitIs PGWRT            
        1 #BitIs PGERS            
        0 #BitIs SELFPRGEN   
        
    BitsIn MCUCR
        4 #BitIs PUD                          \  
        1 #BitIs IVSEL       
        0 #BitIs IVCE        
                
    BitsIn MCUSR
        3 #BitIs WDRF                         \  
        2 #BitIs BORF        
        1 #BitIs EXTRF       
        0 #BitIs PORF        
        
    BitsIn SMCR
        3 #BitIs SM2                          \  
        2 #BitIs SM1         
        1 #BitIs SM0         
        0 #BitIs SE          
        
    BitsIn ACSR
        7 #BitIs ACD                          \  
        6 #BitIs ACBG                
        5 #BitIs ACO         
        4 #BitIs ACI         
        3 #BitIs ACIE        
        2 #BitIs ACIC        
        1 #BitIs ACIS1       
        0 #BitIs ACIS0       

    BitsIn SPSR
        7 #BitIs SPIF                         \  
        6 #BitIs WCOL        
        0 #BitIs SPI2X       
        
    BitsIn SPCR
        7 #BitIs SPIE                         \  
        6 #BitIs SPE         
        5 #BitIs DORD        
        4 #BitIs MSTR        
        3 #BitIs CPOL        
        2 #BitIs CPHA        
        1 #BitIs SPR1        
        0 #BitIs SPR0        
        
    BitsIn TCCR0B
        7 #BitIs FOC0A                        \  
        6 #BitIs FOC0B       
        3 #BitIs WGM02            
        2 #BitIs CS02        
        1 #BitIs CS01        
        0 #BitIs CS00        
        
    BitsIn TCCR0A
        7 #BitIs COM0A1                       \  
        6 #BitIs COM0A0      
        5 #BitIs COM0B1      
        4 #BitIs COM0B0      
        1 #BitIs WGM01       
        0 #BitIs WGM00       
        
    BitsIn GTCCR
        7 #BitIs TSM                             \  
        1 #BitIs PSR2                    
        1 #BitIs PSRASY      
        0 #BitIs PSR10        
        0 #BitIs PSRSYNC      
        
    BitsIn EECR
        5 #BitIs EEPM1                        \  
        4 #BitIs EEPM0               
        3 #BitIs EERIE       
        2 #BitIs EEMPE               
        1 #BitIs EEPE        
        0 #BitIs EERE        
        2 #BitIs EEMWE                        \  Kept for backward compatibility
        1 #BitIs EEWE                         \  Kept for backward compatibility

    BitsIn EIMSK
        1 #BitIs INT1                         \  
        0 #BitIs INT0         
                
    BitsIn EIFR
        1 #BitIs INTF1                        \  
        0 #BitIs INTF0       
        
    BitsIn PCIFR
        2 #BitIs PCIF2                        \  
        1 #BitIs PCIF1       
        0 #BitIs PCIF0               
        
    BitsIn TIFR2
        2 #BitIs OCF2B                        \  
        1 #BitIs OCF2A       
        0 #BitIs TOV2        
        
    BitsIn TIFR1
        5 #BitIs ICF1                         \  
        2 #BitIs OCF1B        
        1 #BitIs OCF1A       
        0 #BitIs TOV1        
        
    BitsIn TIFR0
        2 #BitIs OCF0B                        \  
        1 #BitIs OCF0A       
        0 #BitIs TOV0        
        
        \  - Port D -
    BitsIn PORTD
        7 #BitIs PORTD7                       \  
        6 #BitIs PORTD6       
        5 #BitIs PORTD5       
        4 #BitIs PORTD4      
        3 #BitIs PORTD3      
        2 #BitIs PORTD2      
        1 #BitIs PORTD1      
        0 #BitIs PORTD0      
        
    BitsIn PORTD
        7 #BitIs PD7                          \  
        6 #BitIs PD6          
        5 #BitIs PD5          
        4 #BitIs PD4         
        3 #BitIs PD3         
        2 #BitIs PD2         
        1 #BitIs PD1         
        0 #BitIs PD0         

    BitsIn DDRD
        7 #BitIs DDD7                         \  
        6 #BitIs DDD6        
        5 #BitIs DDD5        
        4 #BitIs DDD4        
        3 #BitIs DDD3        
        2 #BitIs DDD2        
        1 #BitIs DDD1        
        0 #BitIs DDD0        
        
    BitsIn PIND
        7 #BitIs PIND7                        \  
        6 #BitIs PIND6         
        5 #BitIs PIND5        
        4 #BitIs PIND4       
        3 #BitIs PIND3       
        2 #BitIs PIND2       
        1 #BitIs PIND1       
        0 #BitIs PIND0       
        
        \  - Port C -
    BitsIn PORTC
        6 #BitIs PORTC6                       \  
        5 #BitIs PORTC5       
        4 #BitIs PORTC4      
        3 #BitIs PORTC3      
        2 #BitIs PORTC2      
        1 #BitIs PORTC1      
        0 #BitIs PORTC0      
        
    BitsIn PORTC
        6 #BitIs PC6                          \  
        5 #BitIs PC5          
        4 #BitIs PC4         
        3 #BitIs PC3         
        2 #BitIs PC2         
        1 #BitIs PC1         
        0 #BitIs PC0         
        
    BitsIn DDRC
        6 #BitIs DDC6                         \  
        5 #BitIs DDC5        
        4 #BitIs DDC4        
        3 #BitIs DDC3        
        2 #BitIs DDC2        
        1 #BitIs DDC1        
        0 #BitIs DDC0        
        
    BitsIn PINC
        6 #BitIs PINC6                        \  
        5 #BitIs PINC5       
        4 #BitIs PINC4       
        3 #BitIs PINC3       
        2 #BitIs PINC2       
        1 #BitIs PINC1       
        0 #BitIs PINC0       
                
        \  - Port B -
    BitsIn PORTB
        7 #BitIs PORTB7                       \  
        6 #BitIs PORTB6      
        5 #BitIs PORTB5      
        4 #BitIs PORTB4      
        3 #BitIs PORTB3      
        2 #BitIs PORTB2      
        1 #BitIs PORTB1      
        0 #BitIs PORTB0      
        
    BitsIn PORTB
        7 #BitIs PB7                          \  
        6 #BitIs PB6         
        5 #BitIs PB5         
        4 #BitIs PB4         
        3 #BitIs PB3         
        2 #BitIs PB2         
        1 #BitIs PB1         
        0 #BitIs PB0         
        
    BitsIn DDRB
        7 #BitIs DDB7                         \  
        6 #BitIs DDB6        
        5 #BitIs DDB5        
        4 #BitIs DDB4        
        3 #BitIs DDB3        
        2 #BitIs DDB2        
        1 #BitIs DDB1        
        0 #BitIs DDB0        
        
    BitsIn PINB
        7 #BitIs PINB7                        \  
        6 #BitIs PINB6       
        5 #BitIs PINB5       
        4 #BitIs PINB4       
        3 #BitIs PINB3       
        2 #BitIs PINB2       
        1 #BitIs PINB1       
        0 #BitIs PINB0       
        

\ Набор инструкций микроконтроллера ATmega48-88.
\ Система обозначения операндов в основном совпадает с фирменной документацией,
\ но для большей информативности и различимости, введены дополнительные.
\ Rr    - регистр общего назначения (РОН), R[0...31]
\ Rd    - регистр общего назначения, R[0...31]
\ Rdr   - частный случай, когда Rd=Rr
\ R'd   - старшие регистры, R[16...31]
\ R"d   - чётные регистры, R[2,4,...30]
\ R*d   - регистровые пары, R[24,26,28,30]
\ b     - бит в РОН или порту, доступный для битовых команд
\ sb    - бит в системном регистре SREG 
\ k     - абсолютный адрес в пространстве ROM, всегда >0
\ -k    - относительный адрес, может быть отрицательным
\ (k)   - абсолютный адрес в пространстве RAM
\ A     - адрес в пространстве ввода-вывода, 0<=A<=31 (или 32<=(k)<=63 в RAM)
\ !K!   - байт маски, при ассемблировании инвертируется
\ K!    - байт, константа

\ ------------------------------------------------------------------------------
\ первое opcode (последнее при поиске) в цепи - заглушка
\ ------------------------------------------------------------------------------
cmd: ?unknown?  ?.   ;  Opcode: ................    \ заглушка        
\ порядок следования команд в этом списке в основном совпадает с документацией,
\ но похожие команды должны следовать от большего числа параметров к меньшим.

\ арифметические и логические операции
cmd: ADD    Rd, Rr   ;  Opcode: 000011rdddddrrrr    \ Суммирование без переноса | Rd=Rd + Rr 
cmd: ADC    Rd, Rr   ;  Opcode: 000111rdddddrrrr    \ Суммирование с переносом | Rd=Rd + Rr + C
cmd: ADIW   R*d, K!  ;  Opcode: 10010110KKddKKKK    \ Сложить константу и слово | Rdh:Rdl=Rdh:Rdl + K6 
cmd: SUB    Rd, Rr   ;  Opcode: 000110rdddddrrrr    \ Вычитание без переноса | Rd=Rd - Rr
cmd: SUBI   R'd, K!  ;  Opcode: 0101KKKKddddKKKK    \ Вычитание константы | Rd=Rd - K8
cmd: SBC    Rd, Rr   ;  Opcode: 000010rdddddrrrr    \ Вычитание с переносом | Rd=Rd - Rr - C
cmd: SBCI   R'd, K!  ;  Opcode: 0100KKKKddddKKKK    \ Вычитание константы с переносом | Rd=Rd - K8 - C
cmd: SBIW   R*d, K!  ;  Opcode: 10010111KKddKKKK    \ Вычесть константу из слова | Rdh:Rdl=Rdh:Rdl - K6
cmd: AND    Rd, Rr   ;  Opcode: 001000rdddddrrrr    \ Логическое И | Rd=Rd · Rr
cmd: CBR    R'd, !K! ;  Opcode: 0111KKKKddddKKKK    \ Сбросить бит (биты) в регистре | Rd=Rd · ($FF - K8)
cmd: ANDI   R'd, K!  ;  Opcode: 0111KKKKddddKKKK    \ Логическое И с константой | Rd=Rd · K8
cmd: OR     Rd, Rr   ;  Opcode: 001010rdddddrrrr    \ Логическое ИЛИ | Rd=Rd V Rr
cmd: SBR    R'd, K!  ;  Opcode: 0110KKKKddddKKKK    \ Установить бит (биты) в регистре | Rd=Rd V K8
cmd: ORI    R'd, K!  ;  Opcode: 0110KKKKddddKKKK    \ Логическое ИЛИ с константой | Rd=Rd V K8
cmd: EOR    Rd, Rr   ;  Opcode: 001001rdddddrrrr    \ Логическое исключающее ИЛИ | Rd=Rd EOR Rr
cmd: COM    Rd       ;  Opcode: 1001010ddddd0000    \ Побитная Инверсия | Rd=$FF - Rd
cmd: NEG    Rd       ;  Opcode: 1001010ddddd0001    \ Изменение знака (Доп. код) | Rd=$00 - Rd
cmd: INC    Rd       ;  Opcode: 1001010ddddd0011    \ Инкрементировать значение регистра | Rd=Rd + 1
cmd: DEC    Rd       ;  Opcode: 1001010ddddd1010    \ Декрементировать значение регистра | Rd=Rd -1
cmd: TST    Rdr      ;  Opcode: 001000rdddddrrrr    \ Проверка на ноль либо отрицательность | Rd=Rd · Rd
cmd: CLR    Rdr      ;  Opcode: 001001rdddddrrrr    \ Очистить регистр | Rd=0
cmd: SER    R'd      ;  Opcode: 11101111dddd1111    \ Установить регистр | Rd=$FF
cmd: MUL    Rd, Rr   ;  Opcode: 100111rdddddrrrr    \ Умножение чисел без знака | R1:R0=Rd * Rr
cmd: MULS   R'd, R'r ;  Opcode: 00000010ddddrrrr    \ Умножение чисел со знаком | R1:R0=Rd * Rr
cmd: MULSU  R'd, R'r ;  Opcode: 000000110ddd0rrr    \ Умножение числа со знаком с числом без знака | R1:R0=Rd * Rr
cmd: FMUL   R'd, R'r ;  Opcode: 000000110ddd1rrr    \ Умножение дробных чисел без знака | R1:R0=(Rd * Rr) << 1
cmd: FMULS  R'd, R'r ;  Opcode: 000000111ddd0rrr    \ Умножение дробных чисел со знаком | R1:R0=(Rd *Rr) << 1
cmd: FMULSU R'd, R'r ;  Opcode: 000000111ddd1rrr    \ Умножение дробного числа со знаком с числом без знака | R1:R0=(Rd * Rr) << 1

\ передача управления
cmd: RJMP   -k       ;  Opcode: 1100kkkkkkkkkkkk    \ Относительный переход | PC=PC + k +1
cmd: IJMP            ;  Opcode: 1001010000001001    \ Косвенный переход на (Z) | PC=Z
cmd: RCALL  -k       ;  Opcode: 1101kkkkkkkkkkkk    \ Относительный вызов подпрограммы | STACK=PC+1, PC=PC + k + 1
cmd: ICALL           ;  Opcode: 1001010100001001    \ Косвенный вызов (Z) | STACK=PC+1, PC=Z 
cmd: RET             ;  Opcode: 1001010100001000    \ Возврат из подпрограммы | PC=STACK
cmd: RETI            ;  Opcode: 1001010100011000    \ Возврат из прерывания | PC=STACK
cmd: CPSE   Rd, Rr   ;  Opcode: 000100rdddddrrrr    \ Сравнить, пропустить если равны | if (Rd==Rr) PC=PC 2 or 3
cmd: CP     Rd, Rr   ;  Opcode: 000101rdddddrrrr    \ Сравнить | Rd -Rr
cmd: CPC    Rd, Rr   ;  Opcode: 000001rdddddrrrr    \ Сравнить с переносом | Rd - Rr - C
cmd: CPI    R'd, K!  ;  Opcode: 0011KKKKddddKKKK    \ Сравнить с константой | Rd - K
cmd: SBRC   Rr, b    ;  Opcode: 1111110rrrrr0bbb    \ Пропустить если бит в регистре очищен |if(Rr(b)==0) PC=PC + 2 or 3
cmd: SBRS   Rr, b    ;  Opcode: 1111111rrrrr0bbb    \ Пропустить если бит в регистре установлен | if(Rr(b)==1) PC=PC + 2 or 3   
cmd: SBIC   A,  b    ;  Opcode: 10011001AAAAAbbb    \ Пропустить если бит в порту очищен | if(I/O(P,b)==0) PC=PC + 2 or 3
cmd: SBIS   A,  b    ;  Opcode: 10011011AAAAAbbb    \ Пропустить если бит в порту установлен | if(I/O(P,b)==1) PC=PC + 2 or 3
cmd: BRBS   sb, -k   ;  Opcode: 111100kkkkkkksss    \ Перейти если флаг в SREG установлен | if(SREG(s)==1) PC=PC + k + 1
cmd: BRBC   sb, -k   ;  Opcode: 111101kkkkkkksss    \ Перейти если флаг в SREG очищен | if(SREG(s)==0) PC=PC + k + 1
cmd: BREQ   -k       ;  Opcode: 111100kkkkkkk001    \ Перейти если равно | if(Z==1) PC=PC + k + 1
cmd: BRNE   -k       ;  Opcode: 111101kkkkkkk001    \ Перейти если не равно | if(Z==0) PC=PC + k + 1
cmd: BRLO   -k       ;  Opcode: 111100kkkkkkk000    \ Перейти если меньше | if(C==1) PC=PC + k + 1
cmd: BRCS   -k       ;  Opcode: 111100kkkkkkk000    \ Перейти если перенос установлен | if(C==1) PC=PC + k + 1
cmd: BRSH   -k       ;  Opcode: 111101kkkkkkk000    \ Перейти если равно или больше | if(C==0) PC=PC + k + 1
cmd: BRCC   -k       ;  Opcode: 111101kkkkkkk000    \ Перейти если перенос очищен | if(C==0) PC=PC + k + 1
cmd: BRMI   -k       ;  Opcode: 111100kkkkkkk010    \ Перейти если минус | if(N==1) PC=PC + k + 1
cmd: BRPL   -k       ;  Opcode: 111101kkkkkkk010    \ Перейти если плюс | if(N==0) PC=PC + k + 1
cmd: BRGE   -k       ;  Opcode: 111101kkkkkkk100    \ Перейти если больше или равно (со знаком) | if(S==0) PC=PC + k + 1
cmd: BRLT   -k       ;  Opcode: 111100kkkkkkk100    \ Перейти если меньше нуля (со знаком) | if(S==1) PC=PC + k + 1
cmd: BRHS   -k       ;  Opcode: 111100kkkkkkk101    \ Перейти если флаг внутреннего переноса установлен | if(H==1) PC=PC + k + 1
cmd: BRHC   -k       ;  Opcode: 111101kkkkkkk101    \ Перейти если флаг внутреннего переноса очищен | if(H==0) PC=PC + k + 1
cmd: BRTS   -k       ;  Opcode: 111100kkkkkkk110    \ Перейти если флаг T установлен | if(T==1) PC=PC + k + 1
cmd: BRTC   -k       ;  Opcode: 111101kkkkkkk110    \ Перейти если флаг T очищен | if(T==0) PC=PC + k + 1
cmd: BRVS   -k       ;  Opcode: 111100kkkkkkk011    \ Перейти если флаг переполнения установлен | if(V==1) PC=PC + k + 1
cmd: BRVC   -k       ;  Opcode: 111101kkkkkkk011    \ Перейти если флаг переполнения очищен | if(V==0) PC=PC + k + 1
cmd: BRIE   -k       ;  Opcode: 111100kkkkkkk111    \ Перейти если прерывания разрешены | if(I==1) PC=PC + k + 1
cmd: BRID   -k       ;  Opcode: 111101kkkkkkk111    \ Перейти если прерывания запрещены | if(I==0) PC=PC + k + 1

\ перемещение данных
cmd: MOV    Rd, Rr   ;  Opcode: 001011rdddddrrrr    \ Скопировать регистр | Rd=Rr
cmd: MOVW   R"d, R"r ;  Opcode: 00000001ddddrrrr    \ Скопировать пару регистров | Rd+1:Rd=Rr+1:Rr, r,d чётные
cmd: LDI    R'd, K!  ;  Opcode: 1110KKKKddddKKKK    \ Загрузить константу | Rd=K
cmd: LD     Rd, X+   ;  Opcode: 1001000ddddd1101    \ Косвенная загрузка с пост-инкрементом | Rd=(X), X=X+1
cmd: LD     Rd, -X   ;  Opcode: 1001000ddddd1110    \ Косвенная загрузка с пре-декрементом | X=X-1, Rd=(X)
cmd: LD     Rd, X    ;  Opcode: 1001000ddddd1100    \ Косвенная загрузка | Rd=(X)
cmd: LDD    Rd, Y+q  ;  Opcode: 10q0qq0ddddd1qqq    \ Косвенная загрузка со смещением | Rd=(Y+q) 
cmd: LD     Rd, Y+   ;  Opcode: 1001000ddddd1001    \ Косвенная загрузка с пост-инкрементом | Rd=(Y), Y=Y+1
cmd: LD     Rd, -Y   ;  Opcode: 1001000ddddd1010    \ Косвенная загрузка с пре-декрементом | Y=Y-1, Rd=(Y)
cmd: LD     Rd, Y    ;  Opcode: 1000000ddddd1000    \ Косвенная загрузка | Rd=(Y)
cmd: LDD    Rd, Z+q  ;  Opcode: 10q0qq0ddddd0qqq    \ Косвенная загрузка со смещением | Rd=(Z+q) 
cmd: LD     Rd, Z+   ;  Opcode: 1001000ddddd0001    \ Косвенная загрузка с пост-инкрементом | Rd=(Z), Z=Z+1
cmd: LD     Rd, -Z   ;  Opcode: 1001000ddddd0010    \ Косвенная загрузка с пре-декрементом | Z=Z-1, Rd=(Z)
cmd: LD     Rd, Z    ;  Opcode: 1000000ddddd0000    \ Косвенная загрузка | Rd=(Z)
cmd: LDS    Rd, (k)  ;  Opcode: 1001000ddddd0000 ext: kkkkkkkkkkkkkkkk \ Прямая загрузка | Rd=(k)
cmd: ST     X+, Rr   ;  Opcode: 1001001rrrrr1101    \ Косвенное сохранение с пост-инкрементом | (X)=Rr, X=X+1
cmd: ST     -X, Rr   ;  Opcode: 1001001rrrrr1110    \ Косвенное сохранение с пре-декрементом | X=X-1, (X)=Rr
cmd: ST     X,  Rr   ;  Opcode: 1001001rrrrr1100    \ Косвенное сохранение | (X)=Rr
cmd: STD    Y+q, Rr  ;  Opcode: 10q0qq1rrrrr1qqq    \ Косвенное сохранение со смещением | (Y+q)=Rr
cmd: ST     Y+, Rr   ;  Opcode: 1001001rrrrr1001    \ Косвенное сохранение с пост-инкрементом | (Y)=Rr, Y=Y+1 
cmd: ST     -Y, Rr   ;  Opcode: 1001001rrrrr1010    \ Косвенное сохранение с пре-декрементом | Y=Y-1, (Y)=Rr 
cmd: ST     Y,  Rr   ;  Opcode: 1000001rrrrr1000    \ Косвенное сохранение | (Y)=Rr
cmd: STD    Z+q, Rr  ;  Opcode: 10q0qq1rrrrr0qqq    \ Косвенное сохранение со смещением | (Z+q)=Rr
cmd: ST     Z+, Rr   ;  Opcode: 1001001rrrrr0001    \ Косвенное сохранение с пост-инкрементом | (Z)=Rr, Z=Z+1 
cmd: ST     -Z, Rr   ;  Opcode: 1001001rrrrr0010    \ Косвенное сохранение с пре-декрементом | Z=Z-1, (Z)=Rr
cmd: ST     Z,  Rr   ;  Opcode: 1000001rrrrr0000    \ Косвенное сохранение | (Z)=Rr
cmd: STS    (k), Rr  ;  Opcode: 1001001rrrrr0000 ext: kkkkkkkkkkkkkkkk \ Прямое сохранение | (k)=Rr
cmd: LPM    Rd, Z+   ;  Opcode: 1001000ddddd0101    \ Загрузка из программной памяти с пост-инкрементом | Rd=(Z), Z=Z+1
cmd: LPM    Rd, Z    ;  Opcode: 1001000ddddd0100    \ Загрузка из программной памяти | Rd=(Z)
cmd: LPM             ;  Opcode: 1001010111001000    \ Загрузка из программной памяти | R0=(Z)
cmd: ELPM   Rd, Z+   ;  Opcode: 1001000ddddd0111    \ Расширенная загрузка из программной памяти с пост-инкрементом | Rd=(RAMPZ:Z), Z=Z+1
cmd: ELPM   Rd, Z    ;  Opcode: 1001000ddddd0110    \ Расширенная загрузка из программной памяти | Rd=(RAMPZ:Z)
cmd: ELPM            ;  Opcode: 1001010111011000    \ Расширенная загрузка из программной памяти | R0=(RAMPZ:Z)
cmd: SPM    Z+       ;  Opcode: 1001010111111000    \ Сохранение в программной памяти с постинкрементом | (Z)=R1:R0 | Z=Z+1
cmd: SPM             ;  Opcode: 1001010111101000    \ Сохранение в программной памяти | (Z)=R1:R0
cmd: IN     Rd, A    ;  Opcode: 10110AAdddddAAAA    \ Чтение порта | Rd=P
cmd: OUT    A,  Rr   ;  Opcode: 10111AArrrrrAAAA    \ Запись в порт | P=Rr
cmd: PUSH   Rr       ;  Opcode: 1001001rrrrr1111    \ Занесение регистра в стек | STACK=Rr
cmd: POP    Rd       ;  Opcode: 1001000ddddd1111    \ Извлечение регистра из стека | Rd=STACK

\ битовые операции
cmd: SBI    A,  b    ;  Opcode: 10011010AAAAAbbb    \ Установить бит в порту | I/O(P,b)=1
cmd: CBI    A,  b    ;  Opcode: 10011000AAAAAbbb    \ Очистить бит в порту | I/O(P,b)=0
cmd: LSL    Rdr      ;  Opcode: 000011rdddddrrrr    \ Логический сдвиг влево | Rd(n+1)=Rd(n), Rd(0)=0, C=Rd(7)
cmd: LSR    Rd       ;  Opcode: 1001010ddddd0110    \ Логический сдвиг вправо | Rd(n)=Rd(n+1), Rd(7)=0, C=Rd(0)
cmd: ROL    Rdr      ;  Opcode: 000111rdddddrrrr    \ Циклический сдвиг влево через C | Rd(0)=C, Rd(n+1)=Rd(n), C=Rd(7)
cmd: ROR    Rd       ;  Opcode: 1001010ddddd0111    \ Циклический сдвиг вправо через C | Rd(7)=C, Rd(n)=Rd(n+1), C=Rd(0)
cmd: ASR    Rd       ;  Opcode: 1001010ddddd0101    \ Арифметический сдвиг вправо | Rd(n)=Rd(n+1), n=0,...,6
cmd: SWAP   Rd       ;  Opcode: 1001010ddddd0010    \ Перестановка тетрад | Rd(3..0)=Rd(7..4), Rd(7..4)=Rd(3..0)
cmd: BSET   sb       ;  Opcode: 100101000sss1000    \ Установка флага | SREG(s)=1
cmd: BCLR   sb       ;  Opcode: 100101001sss1000    \ Очистка флага | SREG(s)=0
cmd: BST    Rd, b    ;  Opcode: 1111101ddddd0bbb    \ Сохранить бит из регистра в T | T=Rr(b)
cmd: BLD    Rd, b    ;  Opcode: 1111100ddddd0bbb    \ Загрузить бит из T в регистр | Rd(b)=T
cmd: SEC             ;  Opcode: 1001010000001000    \ Установить флаг переноса | C=1
cmd: CLC             ;  Opcode: 1001010010001000    \ Очистить флаг переноса | C=0
cmd: SEN             ;  Opcode: 1001010000101000    \ Очистить флаг отрицательного числа | N=1
cmd: CLN             ;  Opcode: 1001010010101000    \ Очистить флаг отрицательного числа | N=0
cmd: SEZ             ;  Opcode: 1001010000011000    \ Установить флаг нуля | Z=1
cmd: CLZ             ;  Opcode: 1001010010011000    \ Очистить флаг нуля | Z=0
cmd: SEI             ;  Opcode: 1001010001111000    \ Установить флаг прерываний | I=1
cmd: CLI             ;  Opcode: 1001010011111000    \ Очистить флаг прерываний | I=0
cmd: SES             ;  Opcode: 1001010001001000    \ Установить флаг числа со знаком | S=1
cmd: CLS             ;  Opcode: 1001010011001000    \ Очистить флаг числа со знаком | S=0
cmd: SEV             ;  Opcode: 1001010000111000    \ Установить флаг переполнения | V=1
cmd: CLV             ;  Opcode: 1001010010111000    \ Очистить флаг переполнения | V=0
cmd: SET             ;  Opcode: 1001010001101000    \ Установить флаг T | T=1
cmd: CLT             ;  Opcode: 1001010011101000    \ Очистить флаг T | T=0 
cmd: SEH             ;  Opcode: 1001010001011000    \ Установить флаг внутреннего переноса | H=1
cmd: CLH             ;  Opcode: 1001010011011000    \ Очистить флаг внутреннего переноса | H=0

\ системные
cmd: NOP             ;  Opcode: 0000000000000000    \ Нет операции  
cmd: SLEEP           ;  Opcode: 1001010110001000    \ Спать (уменьшить энергопотребление)  
cmd: WDR             ;  Opcode: 1001010110101000    \ Сброс сторожевого таймера  

\ остальные
cmd: BREAK           ;  Opcode: 1001010110011000    \ Останов для отладки  



 \ **** End of File ***
